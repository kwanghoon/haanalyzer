{
  "summary": {
    "events": 659,
    "actions": 446,
    "edges": 2161,
    "redundancy_issues": 1217,
    "inconsistency_issues": 374,
    "circularity_issues": 12
  },
  "redundancy": [
    {
      "event": "E:event:call_service[{'event_data': frozenset({('domain', 'cover'), ('service', 'open_cover'), ('service_data', frozenset({('entity_id', 'cover.garage_door')}))}), 'event_type': 'call_service', 'trigger': 'event'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Disarm Alarm')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Disarm Alarm')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.garage_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.back_door_lock_code→USER2)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.back_door_lock_code→USER2)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'open_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'open_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'open_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'open_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'open_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.living_room_motion→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.front_door_lock_code→USER2)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.front_door_lock_code→USER2)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(weather.REDACTED)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(media_player.plex_living_room_appletv→idle)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 10)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 2), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 2), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 2), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 2), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 2), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'seconds': '/15', 'trigger': 'time_pattern'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 7,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 91735138), ('button_number', 6), ('actions', 'release')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:cover.stop_cover({{ trigger.entity_id }})[{'action': 'cover.stop_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 26,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_audio_input_in_use→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_audio_input_in_use→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_audio_input_in_use→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sun.sun→below_horizon)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.USER1_s_macbook_pro_active_audio_input→Inactive)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.USER1_s_macbook_pro_active_audio_input→Inactive)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.USER1_s_macbook_pro_active_audio_input→Inactive)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1s_office_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 20)}), 'trigger': 'state'}]",
      "action": "A:media_player.media_stop(media_player.sonos_USER1s_office)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1s_office_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 20)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 24)}), 'trigger': 'state'}]",
      "action": "A:humidifier.set_mode(humidifier.main_floor)[{'action': 'humidifier.set_mode'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 24)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 17,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.moon_globe=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER1s_office_desktop_clock=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_clock=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:cover.set_cover_position[{'action': 'cover.set_cover_position'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.fountain=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.fountain_lights=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:climate.set_preset_mode[{'action': 'climate.set_preset_mode'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 12,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Chill Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.upstairs_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 36,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_laundry_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_workbench_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_fitness_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_craft_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_utility_area_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.basement_door_lock_code→USER2)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.basement_door_lock_code→USER2)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.washing_machine_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.washing_machine_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(weather.REDACTED→rainy)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.kitchen_sink_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.kitchen_sink_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'disarm_alarm')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'disarm_alarm')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '14:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '14:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Fireplace')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Fireplace')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→on)[{'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.bedroom_closet_motion→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.bedroom_closet_motion→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.stairs_motion→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.stairs_motion→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 45)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 12,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Classical Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.office_rainbow→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.thermostat_away)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'trigger': 'state'}]",
      "action": "A:ecobee.resume_program[{'action': 'ecobee.resume_program'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'trigger': 'state'}]",
      "action": "A:climate.set_preset_mode[{'action': 'climate.set_preset_mode'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→home)[{'trigger': 'state'}]",
      "action": "A:humidifier.set_mode(humidifier.main_floor)[{'action': 'humidifier.set_mode'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.back_door_lock_code→guest)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.back_door_lock_code→guest)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('action', 'press'), ('button_number', 2), ('serial', 43846935)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→off)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.dryer_dry_completed→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 1)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:call_service[{'event_data': frozenset({('service_data', frozenset({('entity_id', 'cover.garage_door')})), ('domain', 'cover'), ('service', 'close_cover')}), 'event_type': 'call_service', 'trigger': 'event'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.basement_door_lock_code→guest)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.basement_door_lock_code→guest)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 51,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.moon_globe=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 12,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(alarm_control_panel.alarm→triggered)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 45,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 7,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.chill_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 91525691), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 91525691), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.laundry_room_light→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.laundry_room_light→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.laundry_room_light→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedroom_rainbow→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.back_door_lock_code→USER1)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.back_door_lock_code→USER1)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→docked)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 6)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('action', 'press'), ('serial', 43846935), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('action', 'press'), ('serial', 43846935), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Arm Alarm Home')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Arm Alarm Home')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.garage_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 62,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 12,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 17,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '05:00:00', 'trigger': 'time'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.USER1_s_office_do_not_disturb→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.basement_door_lock_code→USER1)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.basement_door_lock_code→USER1)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(weather.REDACTED→lightning-rainy)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.main_floor_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.main_floor_roomba→docked)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 6), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 6), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 6), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.upstairs_roomba→docked)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 6)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 53,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 12,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→None)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.main_floor_roomba→docked)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 6)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.main_floor_roomba→docked)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 6)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(media_player.plex_living_room_appletv→paused)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 10)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.front_door_lock_code→USER1)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.front_door_lock_code→USER1)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_laundry_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_workbench_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_fitness_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_craft_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_utility_area_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '00:01:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.laundry_room_light→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.laundry_room_light→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.laundry_room_light→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.bathroom_sink_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.bathroom_sink_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 22,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.upstairs_bathrooom_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.upstairs_bathrooom_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.garage_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.portable_ac_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.portable_ac=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.portable_ac_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 7,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.USER1_s_office_music→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_focus→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_focus→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_focus→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.garage_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_off(switch.garage_door_relay=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_on(switch.garage_door_relay=on)[{'action': 'switch.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_laundry_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_workbench_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_fitness_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_craft_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_utility_area_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(media_player.living_room_apple_tv→idle)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.utility_sink_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.utility_sink_water_sensor→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 45,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 7,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 19,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 45,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.pop_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_camera_in_use→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_camera_in_use→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_camera_in_use→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.stairs_blinds=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.bedroom_closet_blinds=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.kitchen_blinds=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.office_rainbow)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.livingroom_rainbow)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.bedroom_rainbow)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.front_porch_rainbow)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.electronic_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.group_all_sonos)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.view_package_camera)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.package_camera_notification)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 18,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.USER1s_office_desktop_clock=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.living_room_clock=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_off(switch.christmas_tree=off)",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:select.select_option[{'action': 'select.select_option'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_fitness_room)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_backyard_patio)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_roam)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_surround_sound)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_living_room)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_dining_room)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_kitchen)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_bathroom)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_bedroom)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_bedroom_closet)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_USER1s_office)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_USER2s_office)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_move)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.media_stop(media_player.sonos_craft_room)[{'action': 'media_player.media_stop'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:fan.turn_off(fan.USER1s_office_fan)[{'action': 'fan.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:fan.turn_off(fan.living_room_east)[{'action': 'fan.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:fan.turn_off(fan.living_room_west)[{'action': 'fan.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.USER2_s_office_blinds=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.USER2s_office_blinds_left=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.set_cover_position[{'action': 'cover.set_cover_position'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_off(switch.fountain=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_off(switch.fountain_lights=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:climate.set_preset_mode[{'action': 'climate.set_preset_mode'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_off(switch.USER1s_office_air_purifier=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:switch.turn_off(switch.fireplace=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.USER1_s_office_blinds=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.USER1s_office_blinds_left=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:cover.close_cover(cover.USER1s_office_blinds_center=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.interior_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.USER2s_bedroom_closet=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.craft_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.fitness_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:button.press(button.qemu_windows_100_shutdown)[{'action': 'button.press'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:alarm_control_panel.alarm_arm_home(alarm_control_panel.alarm)[{'action': 'alarm_control_panel.alarm_arm_home'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.moon_globe=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.work_bench_light→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.work_bench_light→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.work_bench_light→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 27,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.fountain_lights=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 19,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 5), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 5), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 42010030), ('button_number', 5), ('action', 'press')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action": "A:light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action": "A:light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1s_office_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 19)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1s_office_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 19)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1s_office_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 19)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_opened→off)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.work_bench_light→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.work_bench_light→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(light.work_bench_light→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Arm Alarm Away')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Arm Alarm Away')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 36,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_laundry_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_workbench_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_fitness_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_craft_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_utility_area_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→closed)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→closed)[{'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→closed)[{'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→closed)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(cover.garage_door→closed)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 19,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'below': 65, 'entity_id': 'sensor.REDACTED_temperature', 'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'numeric_state'}]",
      "action": "A:ecobee.resume_program[{'action': 'ecobee.resume_program'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'below': 65, 'entity_id': 'sensor.REDACTED_temperature', 'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'numeric_state'}]",
      "action": "A:climate.set_preset_mode[{'action': 'climate.set_preset_mode'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 41,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}]",
      "paths_count": 32,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 8,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Pop Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.bathroom_motion→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.bathroom_motion→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '01:59:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '23:59:00', 'trigger': 'time'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '23:59:00', 'trigger': 'time'}]",
      "action": "A:switch.turn_off(switch.fountain_lights=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 4)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_audio_input_in_use→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_audio_input_in_use→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_audio_input_in_use→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 13,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Party Mode')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.USER1_s_office_do_not_disturb→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.garage_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 45,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 7,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 9,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_door_opened→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_drain_water_sensor_liquid_detected→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.basement_drain_water_sensor_liquid_detected→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.washer_wash_completed→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 1)}), 'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1s_office_motion→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1s_office_motion→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off({{ trigger.entity_id }})[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 45,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_on({{ trigger.id }})[{'action': 'homeassistant.turn_on'}]",
      "paths_count": 14,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_laundry_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_workbench_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_fitness_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_craft_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_utility_area_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.thermostat_climate_mode→vacation)[{'trigger': 'state'}]",
      "action": "A:humidifier.set_mode(humidifier.main_floor)[{'action': 'humidifier.set_mode'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.thermostat_climate_mode→vacation)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.garage_door→on)[{'trigger': 'state'}]",
      "action": "A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.garage_door→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.garage_door→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.garage_door→on)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.garage_door→on)[{'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'trigger': 'state'}]",
      "action": "A:ecobee.resume_program[{'action': 'ecobee.resume_program'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 91735138), ('button_number', 5), ('actions', 'release')}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action": "A:cover.stop_cover({{ trigger.entity_id }})[{'action': 'cover.stop_cover'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.USER1_s_macbook_pro_active_audio_input)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.USER1_s_macbook_pro_active_audio_input)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.USER1_s_macbook_pro_active_audio_input)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 4)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.fountain_lights=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 30), ('minutes', 4)}), 'trigger': 'state'}]",
      "action": "A:switch.turn_off(switch.fountain_lights=off)[{'action': 'switch.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_laundry_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_workbench_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_fitness_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_craft_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_utility_area_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action": "A:light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→cleaning)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→cleaning)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→cleaning)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→cleaning)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(vacuum.basement_roomba→cleaning)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.livingroom_rainbow→off)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(media_player.living_room_apple_tv→paused)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 12,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_select.sonos→Jazz Music)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:lifx.effect_pulse(light.garage_interior)[{'action': 'lifx.effect_pulse'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_camera_in_use→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_camera_in_use→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_camera_in_use→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.living_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.living_room_accent_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_living_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_dining_room_table)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_kitchen_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_back_door)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bathroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_bedroom_closet_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 3,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_upstairs_hallway_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER1_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_USER2_office_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_laundry_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_workbench_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_fitness_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_craft_room_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.roomba_clean_utility_area_lights)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 50,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on({{ trigger.entity_id }}=on)[{'action': 'light.turn_on'}]",
      "paths_count": 6,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:light.turn_on(light.moon_globe=on)[{'action': 'light.turn_on'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_kitchen)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_bathroom)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:media_player.select_source(media_player.sonos_living_room)[{'action': 'media_player.select_source'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_surround_sound)[{'action': 'media_player.volume_set'}]",
      "paths_count": 12,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}]",
      "paths_count": 10,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:input_select.select_option[{'action': 'input_select.select_option'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:media_player.join(media_player.sonos_living_room)[{'action': 'media_player.join'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_living_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action": "A:media_player.volume_set(media_player.sonos_dining_room)[{'action': 'media_player.volume_set'}]",
      "paths_count": 16,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.front_door_lock_code→guest)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(sensor.front_door_lock_code→guest)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(input_boolean.USER1_s_office_music→off)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.doors→on)[{'trigger': 'state'}]",
      "action": "A:media_player.play_media(media_player.sonos_living_room)[{'action': 'media_player.play_media'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.doors→on)[{'trigger': 'state'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 11,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.doors→on)[{'trigger': 'state'}]",
      "action": "A:media_player.play_media(media_player.sonos_kitchen)[{'action': 'media_player.play_media'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.doors→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.doors→on)[{'trigger': 'state'}]",
      "action": "A:media_player.play_media(media_player.sonos_USER2s_office)[{'action': 'media_player.play_media'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.doors→on)[{'trigger': 'state'}]",
      "action": "A:media_player.play_media(media_player.sonos_move)[{'action': 'media_player.play_media'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.doors→on)[{'trigger': 'state'}]",
      "action": "A:media_player.play_media(media_player.sonos_USER1s_office)[{'action': 'media_player.play_media'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:state(binary_sensor.doors→on)[{'trigger': 'state'}]",
      "action": "A:notify.USER2_devices[{'action': 'notify.USER2_devices'}]",
      "paths_count": 2,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'arm_alarm')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:notify.USER1_devices[{'action': 'notify.USER1_devices'}]",
      "paths_count": 4,
      "issue": "Redundancy: action reachable more than once from event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'arm_alarm')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action": "A:mqtt.publish[{'action': 'mqtt.publish'}]",
      "paths_count": 5,
      "issue": "Redundancy: action reachable more than once from event"
    }
  ],
  "inconsistency": [
    {
      "event": "E:state(input_boolean.garage_door→off)[{'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.garage_door→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'open_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action1": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "action2": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'open_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action1": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'open_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.garage_door_relay=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.garage_door_relay=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.garage_door_relay",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.backyard_deck=on)[{'action': 'light.turn_on'}]",
      "entity": "light.backyard_deck",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.backyard_patio=on)[{'action': 'light.turn_on'}]",
      "entity": "light.backyard_patio",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.lower_backyard_lighting=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.lower_backyard_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.backyard_patio_lighting=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.backyard_patio_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_audio_input_in_use→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "action1": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "action2": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.backyard_deck=on)[{'action': 'light.turn_on'}]",
      "entity": "light.backyard_deck",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.backyard_patio=on)[{'action': 'light.turn_on'}]",
      "entity": "light.backyard_patio",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.lower_backyard_lighting=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.lower_backyard_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.side_yard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.backyard_patio_lighting=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.backyard_patio_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(sensor.USER1_s_macbook_pro_active_audio_input→Inactive)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 24)}), 'trigger': 'state'}]",
      "action1": "valve.close_valve(valve.water_main=closed)[{'action': 'valve.close_valve'}]",
      "action2": "valve.open_valve(valve.water_main=open)[{'action': 'valve.open_valve'}]",
      "entity": "valve.water_main",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.laundry_room_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_stairs",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.work_bench_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.craft_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.craft_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.craft_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.fitness_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.fitness_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.fitness_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.guest_bedroom_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.guest_bedroom_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→off)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→unavailable)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.garage_door_relay=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.garage_door_relay=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.garage_door_relay",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_person_detected→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.bathroom_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.bathroom_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.craft_room_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.craft_room_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→on)[{'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:state_changed[{'event_data': frozenset({('entity_id', 'event.front_door_camera_fingerprint')}), 'event_type': 'state_changed', 'platform': 'event'}]",
      "action1": "lock.unlock(lock.front_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.front_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)[{'trigger': 'state'}]",
      "action1": "valve.close_valve(valve.water_main=closed)[{'action': 'valve.close_valve'}]",
      "action2": "valve.open_valve(valve.water_main=open)[{'action': 'valve.open_valve'}]",
      "entity": "valve.water_main",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 6)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 92034753), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action1": "cover.open_cover[{'action': 'cover.open_cover'}]",
      "action2": "cover.close_cover[{'action': 'cover.close_cover'}]",
      "entity": null,
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Unlock Front Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "lock.unlock(lock.front_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.front_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.backyard_deck=on)[{'action': 'light.turn_on'}]",
      "entity": "light.backyard_deck",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.backyard_patio=on)[{'action': 'light.turn_on'}]",
      "entity": "light.backyard_patio",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.lower_backyard_lighting=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.lower_backyard_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.backyard_patio_lighting=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.backyard_patio_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→off)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→off)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.basement_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.basement_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→home)",
      "action1": "switch.turn_on(switch.exterior_christmas_lights=on)",
      "action2": "switch.turn_off(switch.exterior_christmas_lights=off)",
      "entity": "switch.exterior_christmas_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.front_porch_rainbow→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(sensor.prusa_mk4s→printing)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.prusa_mk4s_enclosure_fan=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.prusa_mk4s_enclosure_fan=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.prusa_mk4s_enclosure_fan",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(sensor.prusa_mk4s→printing)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.prusa_mk4s_psu_fan=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.prusa_mk4s_psu_fan=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.prusa_mk4s_psu_fan",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_opened→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→closed)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('serial', 91525691), ('action', 'press'), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action1": "switch.turn_on(switch.fireplace=on)[{'action': 'switch.turn_on'}]",
      "action2": "switch.turn_off(switch.fireplace=off)[{'action': 'switch.turn_off'}]",
      "entity": "switch.fireplace",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_office_echo_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_office_echo_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:lutron_caseta_button_event[{'event_data': frozenset({('action', 'press'), ('serial', 43846935), ('button_number', 3)}), 'event_type': 'lutron_caseta_button_event', 'trigger': 'event'}]",
      "action1": "switch.turn_on(switch.fireplace=on)[{'action': 'switch.turn_on'}]",
      "action2": "switch.turn_off(switch.fireplace=off)[{'action': 'switch.turn_off'}]",
      "entity": "switch.fireplace",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'unlock_doors')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action1": "lock.unlock(lock.front_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.front_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'unlock_doors')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action1": "lock.unlock(lock.back_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:sun[{'event': 'sunset', 'offset': '-00:15:00', 'platform': 'sun'}]",
      "action1": "switch.turn_on(switch.exterior_christmas_lights=on)",
      "action2": "switch.turn_off(switch.exterior_christmas_lights=off)",
      "entity": "switch.exterior_christmas_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.laundry_room_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.work_bench_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.craft_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.craft_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.craft_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.fitness_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.fitness_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.fitness_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.bedroom_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.bedroom_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'unlock_front_door')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action1": "lock.unlock(lock.front_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.front_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→unknown)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.garage_door_relay=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.garage_door_relay=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.garage_door_relay",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action1": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "action2": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action1": "lock.unlock(lock.back_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action1": "lock.unlock(lock.basement_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.basement_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action1": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "action2": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.back_door_opened→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_focus→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Toggle Garage Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "switch.turn_off(switch.garage_door_relay=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.garage_door_relay=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.garage_door_relay",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.laundry_room_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.work_bench_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.craft_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.craft_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.craft_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.overnight_guest_mode→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 30)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.fitness_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.fitness_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.fitness_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_porch_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_porch_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_porch_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('minutes', 16), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('minutes', 16), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_opened→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_porch_person_detected→off)[{'for': frozenset({('minutes', 16), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_porch_person_detected→off)[{'for': frozenset({('minutes', 16), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_camera_in_use→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Bedtime')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action1": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "action2": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 5)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_yard_camera_person_detected→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Unlock Basement Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "lock.unlock(lock.basement_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.basement_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '11:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action1": "switch.turn_on(switch.backyard_patio_lighting=on)[{'action': 'switch.turn_on'}]",
      "action2": "switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "entity": "switch.backyard_patio_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action1": "light.turn_off(light.backyard_deck=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.backyard_deck=on)[{'action': 'light.turn_on'}]",
      "entity": "light.backyard_deck",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action1": "light.turn_off(light.backyard_patio=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.backyard_patio=on)[{'action': 'light.turn_on'}]",
      "entity": "light.backyard_patio",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action1": "switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.lower_backyard_lighting=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.lower_backyard_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'event': 'sunset', 'offset': '-00:15:00', 'trigger': 'sun'}]",
      "action1": "switch.turn_on(switch.front_yard_lighting=on)[{'action': 'switch.turn_on'}]",
      "action2": "switch.turn_off(switch.front_yard_lighting=off)[{'action': 'switch.turn_off'}]",
      "entity": "switch.front_yard_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER1s_office_motion→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 19)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "switch.turn_off(switch.garage_door_relay=off)[{'action': 'switch.turn_off'}]",
      "action2": "switch.turn_on(switch.garage_door_relay=on)[{'action': 'switch.turn_on'}]",
      "entity": "switch.garage_door_relay",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.laundry_room_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_stairs",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.work_bench_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.craft_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.craft_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.craft_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.guest_mode→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 90)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.fitness_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.fitness_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.fitness_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_yard_camera_person_detected→off)[{'for': frozenset({('minutes', 16), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_yard_camera_person_detected→off)[{'for': frozenset({('minutes', 16), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→closed)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(cover.garage_door→closed)[{'trigger': 'state'}]",
      "action1": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "action2": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 3)}), 'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_doorbell→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:ios.action_fired[{'event_data': frozenset({('actionName', 'Unlock Back Door')}), 'event_type': 'ios.action_fired', 'trigger': 'event'}]",
      "action1": "lock.unlock(lock.back_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.kitchen_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.kitchen_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '01:59:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_yard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_yard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_yard_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 4)}), 'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER1→home)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 4)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_audio_input_in_use→off)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_porch_person_detected→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 15)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER1_s_office_do_not_disturb→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→not_home)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.backyard_gate_camera_person_detected→off)[{'for': frozenset({('minutes', 0), ('seconds', 0), ('hours', 1)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.dining_room_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.dining_room_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.basement_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.laundry_room_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.basement_stairs=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_stairs=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_stairs",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.work_bench_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.craft_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.craft_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.craft_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.fitness_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.fitness_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.fitness_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '09:30:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.closet_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.closet_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.closet_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action1": "lock.unlock(lock.front_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.front_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.front_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action1": "lock.unlock(lock.back_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.back_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(person.USER2→home)[{'trigger': 'state'}]",
      "action1": "lock.unlock(lock.basement_door=unlocked)[{'action': 'lock.unlock'}]",
      "action2": "lock.lock(lock.basement_door=locked)[{'action': 'lock.lock'}]",
      "entity": "lock.basement_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(sensor.thermostat_climate_mode→vacation)[{'trigger': 'state'}]",
      "action1": "valve.close_valve(valve.water_main=closed)[{'action': 'valve.close_valve'}]",
      "action2": "valve.open_valve(valve.water_main=open)[{'action': 'valve.open_valve'}]",
      "entity": "valve.water_main",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.garage_door→on)[{'trigger': 'state'}]",
      "action1": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "action2": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.garage_door→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_interior=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_interior=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_interior",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.garage_door→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(sensor.prusa_mk4s_mmu3→printing)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "switch.turn_on(switch.prusa_mk4s_mmu3_enclosure_fan=on)[{'action': 'switch.turn_on'}]",
      "action2": "switch.turn_off(switch.prusa_mk4s_mmu3_enclosure_fan=off)[{'action': 'switch.turn_off'}]",
      "entity": "switch.prusa_mk4s_mmu3_enclosure_fan",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(sensor.prusa_mk4s_mmu3→printing)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "switch.turn_on(switch.prusa_mk4s_mmu3_psu_fan=on)[{'action': 'switch.turn_on'}]",
      "action2": "switch.turn_off(switch.prusa_mk4s_mmu3_psu_fan=off)[{'action': 'switch.turn_off'}]",
      "entity": "switch.prusa_mk4s_mmu3_psu_fan",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(sensor.USER1_s_macbook_pro_active_audio_input)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.basement_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.laundry_room_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.work_bench_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.craft_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.craft_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.craft_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event[{'at': '07:00:00', 'trigger': 'time'}]",
      "action1": "light.turn_on(light.fitness_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.fitness_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.fitness_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER2_s_office_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER2_s_office_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER2_away→off)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(input_boolean.USER1_away→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 6)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.USER1_s_macbook_pro_camera_in_use→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_desk_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_desk_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.dining_room_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.dining_room_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.dining_room_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_lamps=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_lamps=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_lamps",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.hallway_light=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.hallway_light=on)[{'action': 'light.turn_on'}]",
      "entity": "light.hallway_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.bathroom_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bathroom_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bathroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.bedroom_closet_ceiling=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.bedroom_closet_ceiling=on)[{'action': 'light.turn_on'}]",
      "entity": "light.bedroom_closet_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.kitchen_lights=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.kitchen_lights=on)[{'action': 'light.turn_on'}]",
      "entity": "light.kitchen_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.stairs_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.stairs_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.stairs_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER1_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER1_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER1_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.USER2_office_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.USER2_office_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.USER2_office_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.guest_bedroom_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.guest_bedroom_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.guest_bedroom_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lights=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lights=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lights",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.laundry_room_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.basement_lamp=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.basement_lamp=off)[{'action': 'light.turn_off'}]",
      "entity": "light.basement_lamp",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.work_bench_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.craft_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.craft_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.craft_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.fitness_room_ceiling=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.fitness_room_ceiling=off)[{'action': 'light.turn_off'}]",
      "entity": "light.fitness_room_ceiling",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "switch.turn_on(switch.backyard_patio_lighting=on)[{'action': 'switch.turn_on'}]",
      "action2": "switch.turn_off(switch.backyard_patio_lighting=off)[{'action': 'switch.turn_off'}]",
      "entity": "switch.backyard_patio_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "switch.turn_on(switch.lower_backyard_lighting=on)[{'action': 'switch.turn_on'}]",
      "action2": "switch.turn_off(switch.lower_backyard_lighting=off)[{'action': 'switch.turn_off'}]",
      "entity": "switch.lower_backyard_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(group.household→not_home)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_person_detected→off)[{'for': frozenset({('minutes', 16), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_person_detected→off)[{'for': frozenset({('minutes', 16), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'close_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action1": "cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}]",
      "action2": "cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}]",
      "entity": "cover.garage_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:event:mobile_app_notification_action[{'event_data': frozenset({('action', 'close_garage')}), 'event_type': 'mobile_app_notification_action', 'trigger': 'event'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.front_porch=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.front_porch=off)[{'action': 'light.turn_off'}]",
      "entity": "light.front_porch",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.back_door=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.back_door=off)[{'action': 'light.turn_off'}]",
      "entity": "light.back_door",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.front_door_camera_person_detected→on)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.garage_light=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.garage_light=off)[{'action': 'light.turn_off'}]",
      "entity": "light.garage_light",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.fitness_room_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_off(light.globe=off)[{'action': 'light.turn_off'}]",
      "action2": "light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "entity": "light.globe",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    },
    {
      "event": "E:state(binary_sensor.fitness_room_timer→off)[{'trigger': 'state'}]",
      "action1": "light.turn_on(light.media_center_lighting=on)[{'action': 'light.turn_on'}]",
      "action2": "light.turn_off(light.media_center_lighting=off)[{'action': 'light.turn_off'}]",
      "entity": "light.media_center_lighting",
      "issue": "Inconsistency: conflicting actions reachable from same event"
    }
  ],
  "circularity": [
    {
      "cycle_nodes": "E:state(input_boolean.garage_door→off)[{'trigger': 'state'}] → A:homeassistant.turn_off(input_boolean.garage_door)[{'action': 'homeassistant.turn_off'}] → E:state(cover.garage_door→closed)[{'trigger': 'state'}] → A:cover.close_cover(cover.garage_door=closed)[{'action': 'cover.close_cover'}] → E:state(cover.garage_door→open)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 30)}), 'trigger': 'state'}] → A:cover.open_cover(cover.garage_door=open)[{'action': 'cover.open_cover'}] → E:state(input_boolean.garage_door→on)[{'trigger': 'state'}] → A:homeassistant.turn_on(input_boolean.garage_door)[{'action': 'homeassistant.turn_on'}] → E:state(cover.garage_door→open)[{'trigger': 'state'}]",
      "size": 9,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "E:state(light.globe→on)[{'for': frozenset({('hours', 0), ('minutes', 1), ('seconds', 0)}), 'trigger': 'state'}] → A:light.turn_on(light.globe=on)[{'action': 'light.turn_on'}]",
      "size": 2,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "E:state(light.laundry_room_light→off)[{'trigger': 'state'}] → A:light.turn_off(light.laundry_room_light=off)[{'action': 'light.turn_off'}] → E:state(light.work_bench_light→off)[{'trigger': 'state'}] → A:light.turn_off(light.work_bench_light=off)[{'action': 'light.turn_off'}]",
      "size": 4,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "E:state(light.USER1_office_desk_lamp→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 2)}), 'trigger': 'state'}] → A:light.turn_on(light.USER1_office_desk_lamp=on)[{'action': 'light.turn_on'}]",
      "size": 2,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "E:state(light.USER1_office_desk_accent→on)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 2)}), 'trigger': 'state'}] → A:light.turn_on(light.USER1_office_desk_accent=on)[{'action': 'light.turn_on'}]",
      "size": 2,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "E:state(input_boolean.classical_music→on)[{'trigger': 'state'}] → A:homeassistant.turn_off(input_boolean.classical_music)[{'action': 'homeassistant.turn_off'}] → E:state(input_boolean.chill_music→on)[{'trigger': 'state'}] → A:homeassistant.turn_off(input_boolean.chill_music)[{'action': 'homeassistant.turn_off'}] → E:state(input_boolean.jazz_music→on)[{'trigger': 'state'}] → A:homeassistant.turn_off(input_boolean.jazz_music)[{'action': 'homeassistant.turn_off'}] → E:state(input_boolean.pop_music→on)[{'trigger': 'state'}] → A:homeassistant.turn_off(input_boolean.pop_music)[{'action': 'homeassistant.turn_off'}]",
      "size": 8,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "A:homeassistant.turn_off(input_boolean.bedtime)[{'action': 'homeassistant.turn_off'}] → E:state(input_boolean.bedtime→on)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "size": 2,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "E:state(light.work_bench_light→on)[{'trigger': 'state'}] → A:light.turn_on(light.work_bench_light=on)[{'action': 'light.turn_on'}] → E:state(light.laundry_room_light→on)[{'trigger': 'state'}] → A:light.turn_on(light.laundry_room_light=on)[{'action': 'light.turn_on'}]",
      "size": 4,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "E:state(climate.portable_air_conditioner→cool)[{'trigger': 'state'}] → A:climate.turn_off(climate.portable_air_conditioner)[{'action': 'climate.turn_off'}]",
      "size": 2,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "A:homeassistant.turn_off(input_boolean.garage_door_motor)[{'action': 'homeassistant.turn_off'}] → E:state(input_boolean.garage_door_motor→on)[{'for': frozenset({('minutes', 0), ('hours', 0), ('seconds', 18)}), 'trigger': 'state'}]",
      "size": 2,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "A:homeassistant.turn_on(input_boolean.pihole)[{'action': 'homeassistant.turn_on'}] → E:state(input_boolean.pihole→off)[{'for': frozenset({('hours', 0), ('seconds', 0), ('minutes', 31)}), 'trigger': 'state'}]",
      "size": 2,
      "issue": "Circularity: cycle in event flow graph"
    },
    {
      "cycle_nodes": "E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → E:state(lock.front_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → E:state(lock.back_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → E:state(lock.basement_door→unknown)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → E:state(lock.basement_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → A:zwave_js.ping(lock.basement_door)[{'action': 'zwave_js.ping'}] → E:state(lock.back_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → A:zwave_js.ping(lock.back_door)[{'action': 'zwave_js.ping'}] → E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 10), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}] → A:zwave_js.ping(lock.front_door)[{'action': 'zwave_js.ping'}] → E:state(lock.front_door→unavailable)[{'for': frozenset({('minutes', 5), ('hours', 0), ('seconds', 0)}), 'trigger': 'state'}]",
      "size": 15,
      "issue": "Circularity: cycle in event flow graph"
    }
  ]
}
